{"version":3,"sources":["components/Card.js","components/CardsList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","robot","className","src","name","alt","id","email","CardsList","cardsArray","robots","map","key","SearchBox","onSearchfieldChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","errorInfo","console","log","this","React","Component","App","event","target","value","setState","searchfield","fetch","then","res","json","users","filteredRobots","filter","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"sQAaeA,EAXF,SAAC,GAAa,IAAZC,EAAW,EAAXA,MACX,OACI,yBAAKC,UAAU,iDACf,yBAAKC,IAAG,+BAA0BF,EAAMG,KAAhC,iBAAqDC,IAAI,UAC/D,4BAAKJ,EAAMG,MACX,4BAAKH,EAAMK,IACX,2BAAIL,EAAMM,SCaLC,EAlBG,SAAC,GAAc,IAQvBC,EARsB,EAAZC,OAQUC,KAAI,SAAAV,GAC1B,OAAO,kBAAC,EAAD,CAAMW,IAAKX,EAAMK,GAAIL,MAAOA,OAEvC,OACI,6BACGQ,ICDII,G,MAbG,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,oBAClB,OACE,6BACE,2BACAZ,UAAU,iBACVa,KAAK,OACLC,YAAY,mBACZC,SAAUH,OCCDI,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAO,kBAAmBC,OAAQ,UACjEJ,EAAMK,WCuBFC,E,kDAzBb,WAAYN,GAAQ,IAAD,8BACjB,cAAMA,IACDO,MAAQ,CAAEC,UAAU,GAFR,E,8DAUDC,EAAOC,GAEvBC,QAAQC,IAAI,W,+BAIZ,OAAIC,KAAKN,MAAMC,SAEN,qDAGFK,KAAKb,MAAMK,Y,gDAhBYI,GAE9B,MAAO,CAAED,UAAU,O,GARKM,IAAMC,WC6CnBC,E,kDAvCb,WAAYhB,GAAQ,IAAD,8BACjB,cAAMA,IAaRL,oBAAsB,SAACsB,GACrBN,QAAQC,IAAIK,EAAMC,OAAOC,OACzB,EAAKC,SAAS,CAACC,YAAaJ,EAAMC,OAAOC,SAdzC,EAAKZ,MAAQ,CACThB,OAAQ,GACR8B,YAAa,IAJA,E,gEAQE,IAAD,OAClBC,MAAM,8CACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAK,OAAI,EAAKN,SAAS,CAAC7B,OAAQmC,S,+BAQ9B,IAAD,EACuBb,KAAKN,MAA5BhB,EADA,EACAA,OAAQ8B,EADR,EACQA,YACTM,EAAiBpC,EAAOqC,QAAO,SAAA9C,GACnC,OAAOA,EAAMG,KAAK4C,cAAcC,SAAST,EAAYQ,kBAGvD,OACE,yBAAK9C,UAAU,MACb,wBAAIA,UAAU,YAAd,eACA,kBAAC,EAAD,CAAWY,oBAAqBkB,KAAKlB,sBACrC,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAWJ,OAAQoC,W,GAhCbb,IAAMC,WCKJgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLE,QAAQF,MAAMA,EAAMsC,a","file":"static/js/main.9c704e58.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({robot}) => {\n    return(\n        <div className=\"tc bg-light-green dib ma2 br3 pa3 ba bw1 grow\">\n        <img src={`https://robohash.org/${robot.name}?size=200x200`} alt='robot'/>\n          <h2>{robot.name}</h2>\n          <h3>{robot.id}</h3>\n          <p>{robot.email}</p>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardsList = ({robots}) => {\n    {\n      /*\n        if (true) {\n            throw new Error(\"Not good!!\");\n        }\n      */\n    }\n    const cardsArray = robots.map(robot => {\n        return <Card key={robot.id} robot={robot}/>\n    })\n    return (\n        <div>   \n          {cardsArray}\n        </div>\n    );\n}\n\nexport default CardsList;","import React from 'react';\n\nconst SearchBox = ({onSearchfieldChange}) => {\n  return (\n    <div>\n      <input\n      className=\"ma2 pa2 f3 br3\"\n      type=\"text\"\n      placeholder=\"Search Robots...\"\n      onChange={onSearchfieldChange}\n      />\n    </div>\n  )\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return(\n        <div style={{overflowY: 'Scroll', border:'1px solid black', height: '800px'}}>\n          {props.children}\n        </div>\n    )\n}\n\nexport default Scroll;","import React from 'react';\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    // You can also log the error to an error reporting service\n    console.log(\"Error\")\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return <h1>Something went wrong.</h1>;\n    }\n\n    return this.props.children; \n  }\n}\n\nexport default ErrorBoundary;\n","import React from 'react';\nimport CardsList from '../components/CardsList';\nimport './App.css';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        robots: [],\n        searchfield: ''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(res => res.json())\n    .then(users => this.setState({robots: users}))\n  }\n\n  onSearchfieldChange = (event) => {\n    console.log(event.target.value)\n    this.setState({searchfield: event.target.value});\n  }\n\n  render() {\n    const {robots, searchfield} = this.state;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase())\n    })\n\n    return(\n      <div className=\"tc\">\n        <h1 className=\"f2 title\">RoboFriends</h1>\n        <SearchBox onSearchfieldChange={this.onSearchfieldChange} />\n        <Scroll >\n          <ErrorBoundary>\n            <CardsList robots={filteredRobots} />\n          </ErrorBoundary>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}